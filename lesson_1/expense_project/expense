#! /usr/bin/env ruby

require "pg"
require "io/console"

class CLI
  def initialize
    @expense_data = ExpenseData.new
  end

  def display_help
    puts <<~HELP
    Commands:
    
    add AMOUNT MEMO - record a new expense
    clear - delete all expenses
    list - list all expenses
    delete NUMBER - remove expense with id NUMBER
    search QUERY - list expenses with a matching memo field
    HELP
  end

  def run(arguments)
    command = arguments.shift

    case command
    when "add"
      amount = arguments[0]
      memo = arguments[1]
      abort "You must provide an amount and memo." unless amount && memo
      @expense_data.add_expense(amount, memo)
    when "list"
      @expense_data.list_expenses
    when "search"
      query = arguments[0]
      @expense_data.search_expenses(query)
    when "delete"
      id = arguments[0]
      @expense_data.delete_expense(id)
    when "clear"
      puts "This will remove all expenses. Are you sure? (y/n)"
      response = $stdin.getch
      @expense_data.delete_all_expenses if response == 'y'
    else
      display_help
    end
  end
end

class ExpenseData

  def initialize
    @connection = PG.connect(dbname: "expenses")
    setup_schema
  end

  def list_expenses
    result = @connection.exec("SELECT * FROM expenses ORDER BY created_on ASC;")
    display_count(result)
    display_expenses(result)
  end

  def add_expense(amount, memo)
    sql = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3)"
    params = [amount, memo, "NOW()"]
    @connection.exec_params(sql, params)
  end

  def search_expenses(query)
    sql = "SELECT * FROM expenses WHERE memo ILIKE $1"
    result = @connection.exec_params(sql, ["%#{query}%"])
    display_count(result)
    display_expenses(result)
  end

  def delete_expense(id)
    sql = "SELECT * FROM expenses WHERE id = $1;"
    result = @connection.exec_params(sql, [id])

    if result.ntuples == 1
      sql = "DELETE FROM expenses WHERE id = $1"
      @connection.exec_params(sql, [id])

      puts "The following expense has been deleted:"
      display_expenses(result)
    else
      puts "There is no expense with the id '#{id}'."
    end
  end

  def delete_all_expenses
    @connection.exec("DELETE FROM expenses;")
    puts "All expenses have been deleted."
  end

  private

  def setup_schema
    sql = "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'expenses';"
    result = @connection.exec(sql)
    count = result.field_values("count")[0]
    unless count == "1"
      sql = <<~CREATE_TABLE
        CREATE TABLE expenses (
          id serial PRIMARY KEY,
          amount numeric(6,2) NOT NULL,
          memo text NOT NULL,
          created_on date NOT NULL
        );
        
        ALTER TABLE expenses
        ADD CONSTRAINT positive_amounts_only CHECK(amount > 0);
      CREATE_TABLE

      @connection.exec(sql)
    end
  end

  def display_count(result)
    abort "There are no expenses." if result.ntuples == 0
    count = result.ntuples
    if count == 1
      puts "There is 1 expense."
    else
      puts "There are #{count} expenses."
    end
  end

  def display_expenses(expenses)
    expenses.each do |tuple|
      columns = [tuple["id"].rjust(3),
                 tuple["created_on"].rjust(10),
                 tuple["amount"].rjust(12),
                 tuple["memo"]]
  
      puts columns.join(" | ")
    end

    puts "-" * 50

    amount_sum = expenses.field_values("amount").map(&:to_f).reduce(:+)

    puts "Total #{format('%.2f', amount_sum.to_s).rjust(25)}"
  end
end

CLI.new.run(ARGV)
